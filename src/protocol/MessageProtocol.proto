syntax = "proto3";

/**
 * Messages from client to server.
 */
message RegisterUser {
    string username = 1;
}

message Login {
    string username = 1;
}

message Logout {
    string username = 1;
}

message ChatMessage {
    string msg = 1;
}

message CreateTable {
    string username = 1;
    repeated string decklist = 2;
}

message JoinTable {
    string tableID = 1;
    string username = 2;
    repeated string decklist = 3;
}

message PlayCard {
    string gameID = 1;
    string username = 2;
    string cardID = 3;
}

message ActivateCard {
    string gameID = 1;
    string username = 2;
    string cardID = 3;
}

message StudyCard {
    string gameID = 1;
    string username = 2;
    string cardID = 3;
    repeated Knowledge knowledge = 4;
}

message Pass {
    string gameID = 1;
    string username = 2;
}

message RegisterGameConnection {
    string gameID = 1;
    string username = 2;
}

message RegisterInteractionConnection {
    string gameID = 1;
    string username = 2;
}

message Mulligan {
    string gameID = 1;
    string username = 2;
}

message Keep {
    string gameID = 1;
    string username = 2;
}

message SelectFromHandResponse {
    string gameID = 1;
    string username = 2;
    repeated string selectedIDs = 3;
}

message Concede {
    string gameID = 1;
    string username = 2;
}

message OrderCardsResponse {
    GameState game = 1;
    repeated Card orderedCards = 2;
}

/**
 * Messages from server to client.
 */
message LoginResponse {
    //TODO
}

message RegisterUserResponse {
    //TODO
}

message UpdateChatLog {
    repeated string chatLog = 1;
}

message UpdateTableList {
    repeated Table tables = 1;
}
    
message UpdatePlayerList {
    repeated string players = 1;
}
    
message NewGame {
    GameState game = 1;
}

message UpdateGameState {
    GameState game = 1;
}

message SelectFromHand {
    GameState game = 1;
    int32 selectionCount = 2;
}

message Loss {
    string GameID = 1;
}

message Win {
    string GameID = 1;
}

message OrderCards {
    GameState game = 1;
    repeated Card cardsToOrder = 2;
}
     
    
/**
 * Custom type messages. Should not be sent directly.
 */    
message Table
{
    string id = 1;
    string creator = 2;
    string opponent = 3;
}

enum KnowledgeType {
    NONE = 0;
    BLACK = 1;
    GREEN = 2;
    RED = 3;
    BLUE = 4;
    WHITE = 5;
}

message Knowledge {
    KnowledgeType knowledge = 1;
    int32 count = 2;
}

message Card {
    //TODO
}

message Player {
    string name = 1;
    int32 deckSize = 2;
    int32 energy = 3;
    int32 maxEnergy = 4;
    repeated Card hand = 5;
    repeated Card play = 6;
    repeated Card scrapyard = 7;
    repeated Card void = 8;
    repeated Knowledge knowledgePool = 9;
}

message Opponent {
    string name = 1;
    int32 deckSize = 2;
    int32 energy = 3;
    int32 maxEnergy = 4;
    int32 handSize = 5;
    repeated Card play = 6;
    repeated Card scrapyard = 7;
    repeated Card void = 8;
    repeated KnowledgeEntry knowledgePool = 9;
}

message GameState {
    string id = 1;
    Player player = 2;
    Opponent opponent = 3;
    string turnPlayer =  4;
    string activePlayer = 5;
}
